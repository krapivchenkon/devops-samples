---
- name: ec2-sample
  hosts: localhost
  connection: local
  gather_facts : false
  tags: start
  tasks:
    # - name: Gather EC2 facts
    #   ec2_remote_facts:
    #     region: '{{ aws_default_region }}'
    #     filters:
    #       instance-state-name: stopped
    #       "tag:Name": "{{ aws_instance_tag }}"
    #   register: ec2_info

    # # - debug: 
    # #     var: ec2_info
    # # - debug: 
    # #     var: "{{item}}"
    #   # with_items: "{{ec2_info.instances}}"
    # # register new variable
    # - set_fact: instance_ids=[] # register fact to be used in next task
    # - set_fact:
    #     instance_ids: "{{ instance_ids }} + [ '{{ item.id }}' ]"
    #   with_items: "{{ec2_info.instances}}"
    # - debug: var=instance_ids

    - name: Provision a set of instances from stopped instances
      tags: stopped
      vars:
        instance_ids:
          - 'i-05ed8e8f'
          - 'i-3655e2ba'
      ec2:
        # key_name: "{{ aws_key_name }}"
        # group: '{{ aws_security_group }}'
        region: '{{ aws_default_region }}'
        # instance_type: '{{ aws_instance_type }}'
        # image: '{{ aws_ami_image }}'
        instance_ids: "{{instance_ids}}"
        state: running
        # wait: true
        # instance_tags:
          # Name: "{{aws_instance_tag}}"
      # when: instance_ids|length > 0
        # exact_count: 2
        # count_tag: 
          # Name: "{{aws_instance_tag}}"
      # register: ec2

    - name: Provision a set of instances
      ec2:
        key_name: "{{ aws_key_name }}"
        group: '{{ aws_security_group }}'
        region: '{{ aws_default_region }}'
        instance_type: '{{ aws_instance_type }}'
        image: '{{ aws_ami_image }}'
        wait: true
        exact_count: 2
        count_tag: 
          Name: "{{aws_instance_tag}}"
        instance_tags:
          Name: "{{aws_instance_tag}}"
      register: ec2

    - debug: "msg='Started instances {{ ec2.instances }}'"
      when: ec2.instances is defined

    # TODO: add wait for ssh task
    # - name: Wait for SSH to come up
    #   wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
    #   with_items: '{{ ec2.instances }}'

    - name: Add all instance public IPs to host group
      add_host: hostname={{ item.public_ip }} groups=ec2hosts
      with_items: '{{ ec2.instances }}'


# - authorized_key: user=charlie key="{{ lookup('file', 'id_rsa.pub') }}"

- name: configuration play
  hosts: ec2hosts,ec2
  remote_user: ubuntu
  tags: check
  gather_facts: false
  become: true
  tasks:
    - name: Get Server Hostname
      # shell: bash -c hostname
      command: whoami
      become: true
      register: hname
    # sites is a var from default section
    # changed_when: "active.stdout_lines != sites.keys()"

    - debug: var=hname.stdout_lines


- name: state mgmt play
  hosts: localhost
  connection: local
  # user: ubuntu
  tags: stop
  gather_facts: false 
  tasks:
    - name: Gather EC2 facts
      ec2_remote_facts:
        region: '{{ aws_default_region }}'
        filters:
          instance-state-name: running
          "tag:Name": "{{ aws_instance_tag }}"
      register: ec2_info

    # - debug: 
    #     var: ec2_info
    # - debug: 
    #     var: "{{item}}"
      # with_items: "{{ec2_info.instances}}"
    # register new variable
    - set_fact: instance_ids=[] # register fact to be used in next task
    - set_fact:
        instance_ids: "{{ instance_ids }} + [ '{{ item.id }}' ]"
      with_items: "{{ec2_info.instances}}"
    - debug: var=instance_ids


    - name: Stop the sandbox instances
      # tags: stop
      ec2:
        group: '{{ aws_security_group }}'
        region: '{{ aws_default_region }}'
        key_name: "{{ aws_key_name }}"
        instance_ids: "{{ instance_ids }}"
        # instance_tags: 
          # Name: "{{aws_instance_tag}}"
        state: stopped
        # if this is not VPC instance source_dest_check should be off
        # source_dest_check: no
        wait: True
      # fail: msg="Tasl failed"
      # ignore_errors: yes #suppress because of "You may only describe the sourceDestCheck attribute for VPC instances" message
          # instance_ids: '{{ instance_ids }}'
          # region: '{{ region }}'
          # state: stopped
          # vpc_subnet_id: subnet-29e63245
          # assign_public_ip: yes

    # - name: Terminate instances
    #   tags: term
    #   ec2:
    #     region: '{{ aws_default_region }}'
    #     group: '{{ aws_security_group }}'
    #     instance_tags: 
    #       Name: "Demo"
    #     state: absent
    #     wait: True



- name: state mgmt play
  hosts: localhost
  connection: local
  tags: facts
  gather_facts: false 
  tasks:
    - name: Gather EC2 facts
      ec2_remote_facts:
        region: '{{ aws_default_region }}'
        # filters:
          # instance-state-name: running
          # "tag:Name": "{{ aws_instance_tag }}"
      register: ec2_info

    # - debug: 
    #     var: ec2_info
    # - debug: 
    #     var: "{{item}}"
    #   with_items: "{{ec2_info.instances}}"
    # register new variable
    # - set_fact: instance_ids=[] # register fact to be used in next task
    #TODO: test list creation using |map(attribute="id")|list filter
    - set_fact:
        instance_ids: "{{ instance_ids|default([]) }} + [ '{{ item.id }}' ]"
      with_items: "{{ec2_info.instances}}"
    - debug: var=instance_ids

    # test list slice
    # - debug: 'var="{%- i for i in instance_ids|slice(2) %}"'
    - debug:
        msg: "Len of Array is:{{ instance_ids|length }}"
    - debug: 
        var: "{{ item }}"
      with_items: "{{ instance_ids | lst_slice(0,3) }}"

    # - add_host: hostname={{ item.public_dns_name }} groupname=ec2hosts
    #   with_items: "{{ec2_info.instances}}"

    # - name: wait for instances to listen on port:22
    #   debug:
    #     var=item
    #     # host={{ item.public_dns_name }}
    #     # port=22
    #   with_items: "{{ec2_info.instances}}"

    # Connect to the node and gather facts,
    # including the instance-id. These facts
    # are added to inventory hostvars for the
    # duration of the playbook's execution

# - name: gather Facts from within ec2 metadata
#   hosts: ec2hosts
#   gather_facts: True
#   user: ubuntu
#   # sudo: True
#   tasks:
#     # fetch instance data from the metadata servers in ec2
#     - ec2_facts:

#     # show all known facts for this host
#     - debug: var=hostvars[inventory_hostname]

#     # just show the instance-id
#     - debug: msg="{{ hostvars[inventory_hostname]['ansible_ec2_instance-id'] }}"


# Start a few existing instances, run some tasks
# and stop the instances

- name: Start sandbox instances
  hosts: localhost
  gather_facts: false
  connection: local
  tags: test
  vars:
    instance_ids:
      - 'i-5cf291d6'
  tasks:
    - name: Start the sandbox instances
      local_action:
        module: ec2
        instance_ids: '{{ instance_ids }}'
        region: '{{ aws_default_region }}'
        state: running
        wait: True

- name: debug
  hosts: localhost
  connection: local
  tags: debug
  tasks:
    - debug: "var=aws_default_region"